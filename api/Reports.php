<?php
/**
 * NOLA ClubSpeed API
 * 
 * Proposed API for accessing racer, heat and scoring information
 * generated by NOLA Motorsports Park ClubSpeed server.
 * @author Wes Ratcliff <wes@nolamotor.com>
 * @version 0.1
 */
 
 /**
  * /racers/search?query=Wes Ratcliff&key=test
  * /racers/search?query=wes@nolamotor.com&key=test
  * /racers/1000002?key=test
  * /racers/1000002/heats?key=test
  */
class Reports
{
    public $restler;
    
    function __construct(){
        header('Access-Control-Allow-Origin: *'); //Here for all /say
    }
    
    /*
    // Period Totals

SELECT     SUM(CheckTotal) AS Total, COUNT(*) AS TotalSales
FROM         Checks
WHERE     (ClosedDate BETWEEN '2012-12-17 00:00:00' AND '2012-12-17 23:59:59')

// Sales By Hour

SELECT     MAX(DATEPART(hh, ClosedDate)) AS Hour, SUM(CheckTotal) AS Total, COUNT(*) AS TotalSales
FROM         Checks
WHERE     (ClosedDate BETWEEN '2012-12-17 00:00:00' AND '2012-12-17 23:59:59')
GROUP BY DATEPART(hh, ClosedDate)

/// Total Racers

SELECT     COUNT(HeatDetails.FirstTime) AS TotalRacers
FROM         HeatDetails LEFT OUTER JOIN
                      HeatMain ON HeatMain.HeatNo = HeatDetails.HeatNo
WHERE     (HeatMain.ScheduledTime BETWEEN '2012-12-17 00:00:00' AND '2012-12-17 23:59:59')

/// Total Racers by Hour

SELECT     MAX(DATEPART(hh, HeatMain.ScheduledTime)) AS Hour, COUNT(HeatDetails.FirstTime) AS TotalRacers
FROM         HeatDetails LEFT OUTER JOIN
                      HeatMain ON HeatMain.HeatNo = HeatDetails.HeatNo
WHERE     (HeatMain.ScheduledTime BETWEEN '2012-12-17 00:00:00' AND '2012-12-17 23:59:59')
GROUP BY DATEPART(hh, HeatMain.ScheduledTime)

/// First Timers

SELECT     COUNT(HeatDetails.FirstTime) AS FirstTimeRacers
FROM         HeatDetails LEFT OUTER JOIN
                      HeatMain ON HeatMain.HeatNo = HeatDetails.HeatNo
WHERE     (HeatMain.ScheduledTime BETWEEN '2012-12-17 00:00:00' AND '2012-12-17 23:59:59') AND (HeatDetails.FirstTime = 'true')

/// Period's Best Sellers

SELECT     MAX(CheckDetails.ProductName) AS ProductName, COUNT(*) AS Total
FROM         Checks LEFT OUTER JOIN
                      CheckDetails ON Checks.CheckID = CheckDetails.CheckID
WHERE     (Checks.ClosedDate BETWEEN '2012-12-17 00:00:00' AND '2012-12-17 23:59:59')
GROUP BY CheckDetails.ProductID
ORDER BY Total DESC
*/

    public function report() {
        if (!\ClubSpeed\Security\Authenticate::privateAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }

        if(empty($_GET['period']) && !in_array($_GET['period'], array('t', 'y', 'w', 'm'))) throw new RestException(412,'Invalid period supplied');

        switch($_GET['period']) {
                case 't':
                    $start = date("n/j/Y") . ' 12:00:00 AM';
                    break;
                case 'y':
                    $start = date("n/j/Y", strtotime('yesterday')) . ' 12:00:00 AM';
                    $end = date("n/j/Y", strtotime('yesterday')) . ' 11:59:59 PM';
                    break;
                case 'w':
                    $start = date("n/j/Y", strtotime('last Sunday')) . ' 12:00:00 AM';
                    break;
                case 'm':
                    $start = date("n/j/Y", strtotime('first day of this month')) . ' 12:00:00 AM';
                    break;
                default:
                    throw new RestException(412,'Invalid range given');
        }
        $end = isset($end) ? $end : date("n/j/Y") . ' 11:59:59 PM';

        $tsql_params[] = &$start;
        $tsql_params[] = &$end;
    
        $tsql = "SELECT SUM(CheckTotal) AS total_dollars, COUNT(*) AS total_count FROM Checks WHERE (ClosedDate BETWEEN ? AND ?)";
        $params = array(&$start, &$end);
        $rows1 = $this->run_query($tsql, $params);

        $tsql = "SELECT MAX(DATEPART(hh, ClosedDate)) AS hour, SUM(CheckTotal) AS total_dollars, COUNT(*) AS total_count FROM Checks WHERE (ClosedDate BETWEEN ? AND ?) GROUP BY DATEPART(hh, ClosedDate) ORDER BY hour";
        $params = array(&$start, &$end);
        $rows2 = $this->run_query($tsql, $params);
        
        $tsql = "SELECT COUNT(HeatDetails.FirstTime) AS total_racers FROM HeatDetails LEFT OUTER JOIN HeatMain ON HeatMain.HeatNo = HeatDetails.HeatNo WHERE (HeatMain.ScheduledTime BETWEEN ? AND ?)";
        $params = array(&$start, &$end);
        $rows3 = $this->run_query($tsql, $params);
        
        $tsql = "SELECT MAX(DATEPART(hh, HeatMain.ScheduledTime)) AS hour, COUNT(HeatDetails.FirstTime) AS total_racers FROM HeatDetails LEFT OUTER JOIN HeatMain ON HeatMain.HeatNo = HeatDetails.HeatNo WHERE (HeatMain.ScheduledTime BETWEEN ? AND ?) GROUP BY DATEPART(hh, HeatMain.ScheduledTime) ORDER BY hour";
        $params = array(&$start, &$end);
        $rows4 = $this->run_query($tsql, $params);
        
        $tsql = "SELECT     COUNT(HeatDetails.FirstTime) AS total_new_racers
FROM         HeatDetails LEFT OUTER JOIN
                      HeatMain ON HeatMain.HeatNo = HeatDetails.HeatNo
WHERE     (HeatMain.ScheduledTime BETWEEN ? AND ?) AND (HeatDetails.FirstTime = 'true')";
        $params = array(&$start, &$end);
        $rows5 = $this->run_query($tsql, $params);
        
        $tsql = "SELECT      COUNT(HeatDetails.FirstTime) AS total_races
FROM         HeatDetails LEFT OUTER JOIN
                      HeatMain ON HeatMain.HeatNo = HeatDetails.HeatNo
WHERE     (HeatMain.ScheduledTime BETWEEN ? AND ?)";
        $params = array(&$start, &$end);
        $rows6 = $this->run_query($tsql, $params);
        
        $tsql = "SELECT     COUNT(HeatDetails.FirstTime) AS total_races
FROM         HeatDetails LEFT OUTER JOIN
                      HeatMain ON HeatMain.HeatNo = HeatDetails.HeatNo
WHERE     (HeatMain.ScheduledTime BETWEEN ? AND ?)";
        $params = array(&$start, &$end);
        $rows7 = $this->run_query($tsql, $params);
        
        $rows1[0]['average_sale'] = empty($rows1[0]['total_count']) ? 0 : number_format(round($rows1[0]['total_dollars'] / $rows1[0]['total_count'], 2));
        $rows1[0]['total_dollars'] = number_format($rows1[0]['total_dollars']);
        $rows5[0]['percent_new_racers'] = empty($rows3[0]['total_racers']) ? 0 : round($rows5[0]['total_new_racers'] / $rows3[0]['total_racers']*100);
        
        $rph = array();
        $sph = array();
        foreach($rows2 as $row) {
            $sph[] = array($row['hour'], $row['total_dollars']);
        }
        foreach($rows4 as $row) {
            $rph[] = array($row['hour'], $row['total_racers']);
        }
        
        return array('start' => $start, 'end' => $end, 'report' => array('total_sales' => $rows1[0], 'sales_per_hour' => $sph, 'total_racers' => $rows3[0], 'racers_per_hour' => $rph, 'new_racers' => $rows5[0], 'top_items' => array_slice($rows6, 0, 5), 'total_races' => $rows7[0]));
    }   
    
    public function qb_invoices() {
        if (!\ClubSpeed\Security\Authenticate::privateAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }

        $tsql = "SELECT     c.CheckID, cd.ProductID, cd.ProductName, c.OpenedDate, c.ClosedDate, cd.CreatedDate, c.Discount, c.CheckTotal, cd.UnitPrice, cd.UnitPrice2, cd.DiscountApplied, cd.TaxID, 
                      cd.TaxPercent, pt.TypeDescription, p.CardType
FROM         CheckDetails AS cd LEFT OUTER JOIN
                      Checks AS c ON c.CheckID = cd.CheckID LEFT OUTER JOIN
                      Payment AS p ON p.CheckID = c.CheckID LEFT OUTER JOIN
                      PayType AS pt ON pt.ID = p.PayType
WHERE     cd.ProductID IN (388, 424, 425, 426, 429) ORDER BY c.ClosedDate"; //AND (c.ClosedDate BETWEEN '10/10/2012 00:00:00' AND '10/11/2015 23:59:59')
        $params = array();
        $results = $this->run_query($tsql, $params);
        $csv = '';
        
        //die(print_r(array_keys($results[0])));
        
        $headers = array_keys($results[0]);
        $csv .= implode(',', $headers) . "\r\n";
        
        foreach($results as $key => $row) {
            foreach($row as $pos => $item){
                if(in_array($pos, array('OpenedDate', 'ClosedDate', 'CreatedDate'))) {
                    //print('match on ' . $pos . '<br/>');
                    //$row[$pos] = '"=' . $row[$pos] . '"';
                    $row[$pos] = date('Y-m-d H:i:s', strtotime($row[$pos]));
                } else {
                    $item = str_replace('"','""',$item);
                    $row[$pos] = '"' . $item . '"';
                }
            }
            $csv .= implode(',', $row) . "\r\n";
        }
        //set appropriate headers
        header('Content-Description: File Transfer');
        header('Content-Type: application/csv');
        header('Content-Disposition: attachment; filename=ClubSpeed-Invoice-Details-'.date('Y-m-d-H-i').'.csv');
        header('Expires: 0');
        header('Cache-Control: must-revalidate');
        header('Pragma: public');
        //header('Content-Length: ' . filesize($file));
        ob_clean();
        flush();

        //read the file from disk and output the content.
        echo $csv;
        exit;
    }
    
    public function potential_revenue() {
        if (!\ClubSpeed\Security\Authenticate::privateAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }

        $tsql = "select CONVERT(VARCHAR(10),c.OpenedDate, 102) AS date, SUM((cd.UnitPrice * cd.Qty) - cd.DiscountApplied) as total, pc.ExportName as revenueClass from Checks c LEFT JOIN CheckDetails cd ON c.CheckID = cd.CheckID LEFT JOIN Products p ON p.ProductID = cd.ProductID LEFT JOIN ProductClasses pc ON p.ProductClassID = pc.ProductClassID where c.OpenedDate BETWEEN '01-01-2014 00:00:00' AND '01-01-2014 23:59:59' AND cd.Status = 1 OR cd.Status = 3 group by c.OpenedDate, pc.ExportName ORDER BY c.OpenedDate, pc.ExportName ";
        $params = array();
        $results = $this->run_query($tsql, $params);
        $csv = '';
        
        $headers = array_keys($results[0]);
        $csv .= implode(',', $headers) . "\r\n";
            
        $output     = array();
        $categories = array();
        
        // Create an array for each category/date
        $total = 0;
        foreach($results as $row) {
            if($row['date'] == '2014.01.01') {
                $categories[$row['revenueClass']][] = $row['total'];
                $total += $row['total'];
            }
        }
        
        echo $total;
        print_r($categories);
        die();
        
        foreach($results as $key => $row) {
            $date = $row['date'];
            
            // If it's not in the date array, store it
            if(empty($output[$date])) {
                $dates[] = $date;
                $output[$date] = array();
            }
            
            $category = $row['revenueClass'];
            
            // If it's not in the category array, store it
            if(!in_array($category, $categories)) {
                $categories[] = $category;
                $output[$date][$category] = 0;
            }
            
            @$output[$date][$category] += @str_replace(',', '.', $row['total']);
            
        }
        
        $csv = array();
        
        // Add headers
        $csv[0][] = '';
        foreach($categories as $category) {
            $csv[0][] = $category;
        }
        $csv[0][] = 'Dag totaal';
        
        // Create footer
        $footer = array(0);
        
        // Add data rows
        foreach($dates as $key => $date) {
            $csv[$date]['date'] = $date;
            $dailyTotal = 0;
            foreach($categories as $category) {
                @$csv[$date][$category] = @$output[$date][$category];
                @$dailyTotal += @$output[$date][$category];
                @$footer[$category] += @$output[$date][$category];
            }
            $csv[$date][] = $dailyTotal;
        }
        
        // Create the footer totals row
        $footerTotal = 0;
        foreach($footer as $categoryTotal) {
            $footerTotal += $categoryTotal;
        }
        $footer[0] = 'Totaal';
        $footer[] = $footerTotal;
        $csv['footer'] = $footer;
        
        $csvOutput = '';
        foreach($csv as $row) {
            $csvOutput .= implode(',', $row) . "\r\n";
        }
        
        //set appropriate headers
        header('Content-Description: File Transfer');
        header('Content-Type: application/csv');
        header('Content-Disposition: attachment; filename=ClubSpeed-Potential-Revenue-'.date('d-m-Y-H-i').'.csv');
        header('Expires: 0');
        header('Cache-Control: must-revalidate');
        header('Pragma: public');
        //header('Content-Length: ' . filesize($file));
        ob_clean();
        flush();

        //read the file from disk and output the content.
        echo $csvOutput;
        exit;
    }
    
    public function products() {
        if (!\ClubSpeed\Security\Authenticate::privateAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }

        $tsql = "SELECT p.* , c.Description AS ProductClassName
FROM         Products AS p LEFT OUTER JOIN
                      ProductClasses AS c ON c.ProductClassID = p.ProductClassID
WHERE     (p.Deleted = 'False') AND (p.Enabled = 'True')
ORDER BY p.Description";
        $params = array();
        $results = $this->run_query($tsql, $params);
        foreach($results as $key => $result) {
            //$results[$key]['icon'] = '<img src="data:image/gif;base64,' . base64_encode($results[0]['LargeIcon']) . '" border=0 width=64 height=64 align=absmiddle />';
            $results[$key]['icon'] = base64_encode($results[0]['LargeIcon']);
        }
        //die('<img src="data:image/gif;base64,' . $base_64 . '" />');
        
        if(isset($_GET['format']) && $_GET['format'] == 'datatable') {
            $jsonData = array('aaData' => array());
            foreach($results AS $row){
                $entry = array(
                    'Icon' => $row['icon'],
                    'Description'=>$row['Description'],
                    'Price1'=>'$'.number_format($row['Price1'],2),
                    'Enabled'=>$row['Enabled'],
                    'ProductClassName'=>$row['ProductClassName'],
                    'ProductID'=>$row['ProductID'],
                    
                    );
                $jsonData['aaData'][] = $entry;
            }
        }
        else {
            $jsonData = array('page'=>1,'total'=>count($results),'rows'=>array());
            foreach($results AS $row){
                $entry = array('id'=>$row['ProductID'],
                    'cell'=>$row
                    );
                $jsonData['rows'][] = $entry;
            }
        }
        return $jsonData;
    }
    
    private function run_query($tsql, $params = array()) {
        
        // Connect
        try {
            $conn = new PDO( "sqlsrv:server=(local) ; Database=ClubSpeedV8", "", "");
            $conn->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION );
            
            // Prepare statement
            $stmt = $conn->prepare($tsql);
    
            // Execute statement
            $stmt->execute($params);
            
            // Put in array
            $output = $stmt->fetchAll(PDO::FETCH_ASSOC);

        } catch(Exception $e) { 
            die( print_r( $e->getMessage() ) ); 
        }
        
        return $output;
    }
}