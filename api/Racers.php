<?php
require_once('vendors/swiftmailer/lib/swift_required.php');
require_once('./Queues.php');

use ClubSpeed\Database\Helpers\UnitOfWork;
use ClubSpeed\Enums\Enums;
use ClubSpeed\Logging\LogService as Log;
use ClubSpeed\Mail\MailService as Mail;
use ClubSpeed\Utility\Arrays;
use ClubSpeed\Utility\Tokens;
use ClubSpeed\Security\Authenticate;

/**
 * ClubSpeed API
 *
 * Proposed API for accessing racer, heat and scoring information
 * generated by ClubSpeed server.
 * @author Wes Ratcliff <wes@clubspeed.com>
 * @version 0.1
 */

 /**
  * /racers/search?query=Wes Ratcliff&key=test
  * /racers/search?query=wes@nolamotor.com&key=test
  * /racers/1000002?key=test
  * /racers/1000002/heats?key=test
  */
class Racers
{
    public $restler;

    /**
     * A reference to the globally set CSLogic class.
     */
    private $logic;

    /**
     * A reference to the internal instance of the Queues class.
     */
    private $queues;

    /**
     * A reference to the internal instance of the Settings class.
     */
    private $settings;

    function __construct() {
        $this->logic = isset($GLOBALS['logic']) ? $GLOBALS['logic'] : null;
        $this->queues = new Queues();
        $this->settings = new Settings();
    }

    /**
     * Validate a customer's login by email address and password.
     *
     * @param mixed[string] $request_data An associative array containing all of the request data for the current session.
     * @return mixed[string] An associative array containing customer information.
     */
    public function postlogin($request_data) {
        // ditch the public access entirely for racer login -- this needs to be wide open
        try {
            $username   = @$request_data['username'];
            $password   = @$request_data['password'];
            $token      = @$request_data['token'];
            if (!empty($token))
                return $this->logic->customers->authenticate($token);
            else
                return $this->logic->customers->login($username, $password);
        }
        catch (RestException $e) {
            throw $e;
        }
        catch (CSException $e) {
            throw new RestException($e->getCode() ?: 412, $e->getMessage());
        }
        catch (Exception $e) {
            throw new RestException(500, $e->getMessage());
        }
    }

    /**
     * Upserts a facebook customer and relevant facebook information into the database.
     * Note that this is being handled as an upsert to allow the facebook login to make
     * only a single call for both create and login. This will allow the client to bypass
     * any additional calls to determine whether or not the facebook data is already stored.
     *
     * Requires private access
     * @param mixed[string] An associative array of request data.
     * @return int[string] An associative array containing the customerId at 'CustID'.
     */
    public function postfb_login($request_data) {
        // leave fb login open, for permissions -- same as regular login.
        try {
            $params = $this->mapCreateParams($request_data);
            if (empty($params['Standard']['EmailAddress']))
                throw new CSException('Attempted facebook login without providing an email address!');
            // should customer existence be checked here, or inside facebook->fb_login ??
            $account = $this->logic->customers->find_primary_account($params['Standard']['EmailAddress']);
            if (empty($account))
                $customerId = $this->logic->customers->create_v0($params['Standard']); // use the old, non restful version of the call
            else
                $customerId = $account->CustID;
            $fbId = $params['Facebook']['UId'];
            $fbAccessToken = $params['Facebook']['Access_token'];
            $fbAllowEmail = $params['Facebook']['AllowEmail'];
            $fbAllowPost = $params['Facebook']['AllowPost'];
            $fbEnabled = $params['Facebook']['Enabled'];
            $customer = $this->logic->facebook->fb_login(
                $fbId
                , $customerId
                , $fbAccessToken
                , $fbAllowEmail
                , $fbAllowPost
                , $fbEnabled
            );
            return $customer;
        }
        catch (RestException $e) {
            throw $e; // passthrough
        }
        catch (\CSException $e) {
            throw new RestException(412, $e->getMessage());
        }
        catch (Exception $e) {
            throw new RestException(500, $e->getMessage());
        }
    }

    /**
     * Creates a new customer in the database, includes running new account logic.
     * Requires private access
     *
     * @see Racers::run_new_account_logic() For the additional functions being run on account creation.
     * @param mixed[string] An associative array of request data.
     * @return int[string] An associative array containing the customerId at 'CustID'.
     */
    public function postCreate($request_data) {
        if (!Authenticate::publicAccess())
            throw new RestException(401, "Invalid authorization!");

        // Create customer
        // Create a customer flow from Shakib: Get ID, Check for Unicode, Set Status Flags (based on actions defined), Send Welcome Email, Check for Duplicates, Set privacy_4 = true (if using Facebook)

        // TODO -- Handle setting status fields
        // TODO -- Handle saving SQL

        // use helper function to map 
        // parameters for a customer create
        // to the expected database names
        $params = $this->mapCreateParams($request_data);
        try {
            $customerId = $this->logic->customers->create_v0($params['Standard']); // use the old, non restful version of the call
            $token = Tokens::generate();
            $this->logic->authenticationTokens->create(array(
                'CustomersID'       => $customerId
                , 'TokenType'       => Enums::TOKEN_TYPE_CUSTOMER
                , 'RemoteUserID'    => 1 // what to do with this?
                , 'Token'           => $token
            ));
            Authenticate::impersonate($token); // impersonate customer for the remaining calls
            if (isset($request_data['profilephoto']))
                $this->profile_photo($customerId, $request_data);
            if (isset($request_data['email']))
                $this->welcome($customerId, $request_data);
            return array(
                'customerId' => $customerId,
                'token'      => $token
            );
        }
        catch(\CSException $e) {
            throw new RestException(412, $e->getMessage());
        }
        catch (RestException $e) {
            throw $e; // let the rest exception through
        }
        catch (Exception $e) {
            throw new RestException(500, $e->getMessage());
        }
    }

    /**
     * Registers a new customer in the database, the type of which
     * is determined by the request data which was provided.
     * Requires private access
     *
     * @see Racers::is_fb_registration() For the method being used to determine the type of registration.
     * @see Racers::postCreate() For the method being run on a standard registration.
     * @see Racers::postfb_login() For the method being run on a facebook registration.
     * @see Queues::postadd() For the method being run to add a customer to queues.
     * @param mixed[string] An associative array of request data.
     * @return int[string] An associative array containing the customerId at 'CustID'.
     */
    public final function postregister($request_data) {
        if (!Authenticate::privateAccess())
            throw new RestException(401, "Invalid authorization!");
        // this needs to handle create, add to event, add to event group, send email, etc, etc
        try {
            $params = $this->mapCreateParams($request_data);
            // check the underlying type of registration
            if ($this->is_fb_registration($params)) {
                // facebook registration
                $customer = $this->postfb_login($request_data);
            }
            else {
                // standard registration
                $customer = $this->postCreate($request_data);
            }

            // send new account emails and create waivers
            $this->run_new_account_logic($request_data, $params, $customer['customerId']);

            // add to event or customer queue
            
            // note: the Queues class typically expects customerId
            // to be coming in as part of the request -- mimic this
            // by pushing customerId on to $request_data before sending
            $request_data['customerId'] = $customer['customerId'];

            // *** COMMENTING OUT UNTIL WEBAPI HAS BEEN FULLY IMPLEMENTED ***
            // *** DUE TO A BUG FOUND AT PPR LONGISLAND ON 9/3/2014       ***
            // note: the Queues class contains the logic to determine 
            // whether or not to add to the customer or event queue
            try {
                $this->queues->post($request_data);
            }
            catch(Exception $e) {
                // ignore exceptions from queues->post for now, we want to be sure to return the $customer object
            }
            return $customer;
        }
        catch(RestException $e) {
            throw $e;
        }
        catch(CSException $e) {
            throw new RestException(412, $e->getMessage());
        }
        catch(Exception $e) {
            throw new RestException(500, $e->getMessage());
        }
    }

    /**
     * Apply "status" rules to a customer
     * Requires private access
     *
     * For reference (from Club Speed's ENUMs):
     *  Add_Customer_From_POS = 1
     *  Add_Customer_From_Registration_Terminal = 2
     *  Add_Customer_From_Online_Registration = 3
     *  Add_Event_Customer_From_Online_Registration = 4
     *  Sign_Primary_Waiver = 5
     *  Sign_Secondary_Waiver = 6
     *  Auto_Bill_Succesfull = 7
     *  Auto_Bill_Failed = 8
     */
    public function getapplyRule($customerId, $ruleId) {
        if (!Authenticate::privateAccess()) {
            throw new RestException(401, 'Invalid authorization');
        }

        if(!is_numeric($customerId)) throw new RestException(412, 'Please supply a customerId');
        if(!is_numeric($ruleId)) throw new RestException(412, 'Please supply a ruleId');
        
        // Get customer
        $customer = $this->racer($customerId);
        if(count($customer['racer']) == 0) throw new RestException(412, 'Customer not found');

        // Get rule
        $rule = $this->run_query('SELECT * FROM Rules WHERE RuleID = ?', array($ruleId));
        if(count($rule[0]) == 0) throw new RestException(412, 'Rule not found');

        // Build query to apply rule to customer
        $placeholders = $params = $fields = $columnsToUpdate = array();
        if($rule[0]['ChangeStatus1'] > 0) { $fields[] = 'Status1'; $params[] = $rule[0]['ChangeStatus1']; }
        if($rule[0]['ChangeStatus2'] > 0) { $fields[] = 'Status2'; $params[] = $rule[0]['ChangeStatus2']; }
        if($rule[0]['ChangeStatus3'] > 0) { $fields[] = 'Status3'; $params[] = $rule[0]['ChangeStatus3']; }
        if($rule[0]['ChangeStatus4'] > 0) { $fields[] = 'Status4'; $params[] = $rule[0]['ChangeStatus4']; }
        $params[] = $customerId;

        if(count($fields) == 0) return array('success' => 'No rules to apply');
        
        foreach($fields as $id => $field) {
            $columnsToUpdate[] = "{$fields[$id]} = ?";
        }
        $columnsToUpdate = implode(', ', $columnsToUpdate);

        $tsql = "UPDATE Customers SET {$columnsToUpdate} WHERE CustID = ?";

        $result = $this->run_exec($tsql, $params);
        
        return array('success' => true);
    }

    /**
     * Skims the variables from the provided request_data and splits them into expected Standard and Facebook lists.
     * @private
     * @param mixed[] $request_data All of the request information coming from a client.
     * @return mixed[] The array values split into Standard and Facebook key=>value pairs as the db class expects.
     */
    private function mapCreateParams($request_data) {
        // skim the variables from the request_data
        // and convert them to the expected database names
        return array(
            "Standard" => array(
                // Standard ClubSpeed parameters
                // "CustID"         => // CustID to be provided by the db class
                "RacerName"         => @$request_data['racername']
                , "EmailAddress"    => @$request_data['email']
                , "Hash"            => @$request_data['password'] ?: @$request_data['hash'] // store as "Hash", since we can be sure Hash will be overwritten if password strength is valid.
                , "DoNotMail"       => @$request_data['donotemail']
                , "FName"           => @$request_data['firstname']
                , "LName"           => @$request_data['lastname']
                , "SourceID"        => @$request_data['howdidyouhearaboutus']
                , "BirthDate"       => @$request_data['birthdate'] ?: null //empty($request_data['birthdate']) ? null : \ClubSpeed\Utility\Convert::toDateForServer($request_data['birthdate']) //)) + 24*60*60) what was the +24*60*60 for?
                , "Cell"            => @$request_data['mobilephone']
                , "IgnoreDOB"       => empty($request_data['birthdate']) ? true : false
                , "Gender"          => @$request_data['gender'] // let the db class handle gender conversion
                , "Status1"         => 2 // signifies "Signed Waiver"
                , "Address"         => isset($request_data['Address']) ? $request_data['Address'] : ''
                , "Address2"        => isset($request_data['Address2']) ? $request_data['Address2'] : ''
                , "Country"         => isset($request_data['Country']) ? $request_data['Country'] : ''
                , "City"            => isset($request_data['City']) ? $request_data['City'] : ''
                , "State"           => isset($request_data['State']) ? $request_data['State'] : ''
                , "Zip"             => isset($request_data['Zip']) ? $request_data['Zip'] : ''
                , "LicenseNumber"   => @$request_data['LicenseNumber']
                , "Custom1"         => @$request_data['Custom1']
                , "Custom2"         => @$request_data['Custom2']
                , "Custom3"         => @$request_data['Custom3']
                , "Custom4"         => @$request_data['Custom4']
                , "EventID"         => @$request_data['eventId']
                , "CheckID"         => @$request_data['checkId']
                , "TotalVisits"     => 1 // default TotalVisits to 1
            )
            , "Facebook" => array(
                // Facebook Parameters
                "UId"               => @$request_data['facebookId']
                , "Access_token"    => @$request_data['facebookToken']
                , "AllowEmail"      => @$request_data['facebookAllowEmail']
                , "AllowPost"       => @$request_data['facebookAllowPost']
                , "Enabled"         => @$request_data['facebookEnabled']
                , "Privacy4"        => true // this is always true, when using a facebook login -- set on the customers table
                // "???"            => @$request_data['facebookExpiresIn'] -- not actually stored(!!!)
            )
        );
    }

    private function is_fb_registration(&$params) {
        return (
                !empty($params['Facebook'])
            &&  !empty($params['Facebook']['UId'])
            &&  !empty($params['Facebook']['Access_token'])
        );
    }

    private function is_event_registration(&$params) {
        return (
                !empty($params['Standard']['EventID'])
            // &&  is_int($params['Standard']['EventID'])
            &&  $params['Standard']['EventID'] > -1
        );
    }

    private function run_new_account_logic(&$request_data, &$params, $customerId) {
        $this->create_photos($request_data, $customerId);
        $this->welcome($customerId, $request_data); //$request_data, $customerId);
        if ($this->is_event_registration($params)) {
            $this->getapplyRule(
                $customerId
                , Enums::RULE_ADD_EVENT_CUSTOMER_FROM_ONLINE_REGISTRATION
            );
        }
        else {
            $this->getapplyRule(
                $customerId
                , Enums::RULE_ADD_CUSTOMER_FROM_REGISTRATION_TERMINAL
            );
        }
    }

    private function create_photos(&$request_data, $customerId) {
        $this->profile_photo($customerId, $request_data);
        $this->waivers($customerId, $request_data);
    }

    /**
     * @url POST /:racer_id/welcome
     */
    public function welcome($racer_id, $request_data = array()) {
        try {
            if (!Authenticate::customerAccess($racer_id))
                throw new RestException(401, "Invalid authorization!");
            $customer = $this->logic->customers->get($racer_id); // consider some sort of caching if this adds too much overhead.
            $customer = $customer[0];
            if (!empty($customer->EmailAddress)) {
                if ($customer->DoNotMail === false) {
                    // Get the SMTP settings
                    $settings = $this->logic->helpers->getControlPanelSettings(
                        "MainEngine",
                        array(
                            "SendWelcomeMail"
                            , "EmailWelcomeFrom"
                            , "SMTPServerUseAuthentiation"
                            , "SMTPServer"
                            , "SMTPServerPort"
                            , "SMTPServerAuthenticationUserName"
                            , "SMTPServerAuthenticationPassword"
                            , "SMTPServerUseSSL"
                        )
                    );

                    if (strtolower($settings['SendWelcomeMail']) == "true") { //If the track would like to send welcome e-mails
                        $uow = UnitOfWork::build()->action('all');
                        $this->logic->mailTemplate->uow($uow);
                        $mailTemplate = Arrays::first($uow->data);

                        if (!empty($mailTemplate)) {
                            $subject = $mailTemplate->Subject;
                            $text = $mailTemplate->Text;

                            //Replace any placeholders with their values
                            $tagsToReplace = array('##FIRSTNAME##','##LASTNAME##','##EMAIL##','##TIME##','##RACERNAME##');
                            $dataToInsert = array(
                                $customer->FName
                                , $customer->LName
                                , $customer->EmailAddress
                                , date("F j, Y, g:i a")
                                , $customer->RacerName
                            );

                            $subject = str_replace($tagsToReplace,$dataToInsert,$subject);
                            $text = str_replace($tagsToReplace,$dataToInsert,$text);

                            $businessName = $this->logic->controlPanel->find("TerminalName = MainEngine AND SettingName = BusinessName");
                            $businessName = $businessName[0];
                            $businessName = $businessName->SettingValue;

                            $emailFrom = $this->logic->controlPanel->find("TerminalName = MainEngine AND SettingName = EmailWelcomeFrom");
                            $emailFrom = $emailFrom[0];
                            $emailFrom = array($emailFrom->SettingValue => $businessName);

                            $emailTo = array($customer->EmailAddress => $customer->FName . ' ' . $customer->LName);

                            //Send the e-mail
                            $mail = Mail::builder()
                                ->subject($subject)
                                ->from($emailFrom)
                                ->to($emailTo)
                                ->body($text,'text/html');
                            Mail::send($mail);
                            Log::info("Welcome email sent to: " . $customer->EmailAddress, Enums::NSP_REGISTRATION);
                        }
                        else
                            Log::info("Welcome email not sent! Mail template is missing!", Enums::NSP_REGISTRATION);
                    }
                    else
                        Log::info("Did not send welcome email to: " . $customer->EmailAddress . "! Track setting for SendWelcomeMail was not \"true\"!", Enums::NSP_REGISTRATION);
                }
                else
                    Log::info("Did not send welcome email to: " . $customer->EmailAddress . "! Customer.DoNotMail was \"true\"!", Enums::NSP_REGISTRATION);
            }
            else
                Log::info("Unable to send welcome email! Customer #" . $racer_id . " had an empty email!", Enums::NSP_REGISTRATION);
        }
        catch(Exception $e) {
            $this->_error($e);
        }
    }

    function base64_to_img($base64_string) {
        $data = explode(',', $base64_string);
        return base64_decode($data[1]);
    }

    function createWaiverImages($termsText,$subheaderData,$signatureImage)
    {
        //Dimension variables
        $waiverWidth = 800;
        $waiverHeight = 1100;
        $waiverMargin = 20;
        $headerHeight = 60;
        $subheaderHeight = 170;
        $termsHeight = 640;
        $footerHeight = 190;
        $subheaderLeftMargin = 60;

        //Text format variables
        $font = 'fonts/arial.ttf';
        $fontBold = 'fonts/arialbd.ttf';
        $textPadding = 10;
        $termsFontSize = 10;
        $headerFontSize = 12;
        $subheaderFontSize = 11;
        $termsHeaderFontSize = 12;
        $footerLabelsFontSize = 12;
        $footerDataFontSize = 11;

        $waiverFontSizeSetting = $this->run_query("SELECT SettingValue FROM ControlPanel WHERE TerminalName = 'Registration' AND SettingName = 'waiverFontSize'");
        if (isset($waiverFontSizeSetting[0]['SettingValue']))
        {
            if ($termsFontSize != $waiverFontSizeSetting[0]['SettingValue']) //If we're not using the default size, switch fonts and adjust size accordingly
            {
                $headerFontSize = 11;
                $subheaderFontSize = 10;
                $font = 'fonts/DroidSansMono.ttf';
                $fontBold = 'fonts/DroidSans-Bold.ttf';
            }
            $termsFontSize = $waiverFontSizeSetting[0]['SettingValue'];
        }

        //Key default strings
        $headerText = "Express Assumption of risk, complete waiver and agreement not to sue, and indemnity agreement"; //TODO: That capital "A". Get rid of it. Ugly, ugly.
        $termsHeaderText = "READ THIS CAREFULLY - IT AFFECTS YOUR LEGAL RIGHTS";
        $footerLabelParticipantText = "Participant  X";
        $footerLabelDateText = "Date";
        $dateForSignatureAreaText = date("l, F j, Y")/*"Monday, June 16, 2014"*/;
        $pageText = "Page";
        $ofText = "of";

        //Key data models
        $waivers = array(); //The actual waiver pages, in base64 format, that are returned to the user
        $waiverText = array(); //The waiver text. Each index is a page. Each page is split into lines.
        $currentPage = 1;

        //Determine the height of the entirety of the waiver text - is it more than a single page?
        $termsTextWrapped = $this->wrap($termsFontSize,0,$font,$termsText,$waiverWidth-$waiverMargin*2-$textPadding*4);
        $termsTextWrappedBox = imagettfbbox($termsFontSize, 0, $font, $termsTextWrapped);
        $heightOfTermsText = abs($termsTextWrappedBox[5] - $termsTextWrappedBox[1]);

        if ($heightOfTermsText > $termsHeight) //If the waiver text requires more than one page, split it up for each page
        {
            $allTermsLines = explode("\n",$termsTextWrapped);
            $heightPerLine = $heightOfTermsText / sizeof($allTermsLines);
            $numberOfLinesPerPage = floor( ($termsHeight-50) / $heightPerLine);

            $currentTermsPage = array();
            while (sizeof($allTermsLines) > 0)
            {
                array_push($currentTermsPage,array_shift($allTermsLines));
                if (sizeof($currentTermsPage) == $numberOfLinesPerPage || sizeof($allTermsLines) == 0)
                {
                    array_push($waiverText,$currentTermsPage);
                    $currentTermsPage = array();
                }
            }
        }
        else //Else, we'll just process it as a single-page waiver
        {
            $allTermsLines = explode("\n",$termsTextWrapped);
            array_push($waiverText,$allTermsLines);
        }

        foreach($waiverText as $currentPageWaiverText) //For every waiver page
        {
            //Create the canvas on which to draw the waiver
            $waiverCanvas = imagecreatetruecolor($waiverWidth,$waiverHeight);

            //Color definitions for the current canvas
            $white = imagecolorallocate($waiverCanvas, 255, 255, 255);
            $black = imagecolorallocate($waiverCanvas, 0, 0, 0);

            //Fill the entire waiver with a white background
            imagefilledrectangle($waiverCanvas,0,0,$waiverWidth,$waiverHeight,$white);

            //Draw a black-bordered rectangle to serve as the waiver's inner body, with the specified margin on all sides
            imagerectangle($waiverCanvas,$waiverMargin,$waiverMargin,$waiverWidth - $waiverMargin,$waiverHeight - $waiverMargin,$black);

            //Draw the header line
            imageline($waiverCanvas,0+$waiverMargin,$headerHeight+$waiverMargin,$waiverWidth-$waiverMargin,$headerHeight+$waiverMargin,$black);

            //Determine how to center the header text
            $headerTextBox = imagettfbbox($headerFontSize, 0, $fontBold, $headerText);
            $headerTextBoxWidth = $headerTextBox[2];
            $headerXCoordinate = ceil(($waiverWidth - $headerTextBoxWidth) / 2);
            $headerYCoordinate = $headerHeight/2 + $headerFontSize/2 + $waiverMargin;

            //Write the header text
            imagettftext($waiverCanvas, $headerFontSize, 0, $headerXCoordinate, $headerYCoordinate, $black, $fontBold, $headerText);

            //Draw the subheader line
            imageline($waiverCanvas,0+$waiverMargin,$subheaderHeight+$headerHeight+$waiverMargin,$waiverWidth-$waiverMargin,$subheaderHeight+$headerHeight+$waiverMargin,$black);

            //Determine subheader data starting positions
            $subheaderStartXCoordinate = $subheaderLeftMargin + $waiverMargin + $textPadding;
            $subheaderStartYCoordinate = $headerHeight+$waiverMargin+$subheaderFontSize+$textPadding;
            $currentX = $subheaderStartXCoordinate;
            $currentY = $subheaderStartYCoordinate;
            $currentColumn = 1;
            $currentRow = 1;

            //For every piece of subheader data, render it in the subheader area, bolding the first three data values
            foreach($subheaderData as $field => $value)
            {
                imagettftext($waiverCanvas, $subheaderFontSize, 0, $currentX, $currentY, $black, $font, $field); //Write the field label

                if (is_array($value)) //If there's more than one value for that label, write them beneath one another
                {
                    $firstValueNeedsBolding = true;
                    foreach($value as $currentValue)
                    {
                        imagettftext($waiverCanvas, $subheaderFontSize, 0, $currentX + 100, $currentY, $black, $currentRow <= 3 && $firstValueNeedsBolding? $fontBold : $font, $currentValue);
                        $currentY = $currentY + $subheaderFontSize + $textPadding;
                        $firstValueNeedsBolding = false;
                    }
                    $currentY = $currentY - ($subheaderFontSize + $textPadding);
                }
                else //If there's just value, write the value for that label
                {
                    imagettftext($waiverCanvas, $subheaderFontSize, 0, $currentX + 100, $currentY, $black, $currentRow <= 3 ? $fontBold : $font, $value);
                }
                $currentY = $currentY + $subheaderFontSize + $textPadding;
                if ($currentColumn < 2 && $currentRow >= sizeof($subheaderData)/2 || $currentY > $subheaderHeight+$headerHeight+$waiverMargin) //If we're out of room in the first column
                {
                    $currentX = $currentX + $waiverWidth/2 - $waiverMargin - $subheaderLeftMargin/2; //Move on to the second column
                    $currentY = $subheaderStartYCoordinate + ($subheaderFontSize + $textPadding)*2;
                    $currentColumn += 1;
                }
                $currentRow += 1;
            }

            //Draw the terms header
            $termsHeaderXCoordinate = 0+$waiverMargin+$textPadding*2;
            $termsHeaderYCoordinate = $subheaderHeight+$headerHeight+$waiverMargin+$textPadding*2;
            imagettftext($waiverCanvas, $termsHeaderFontSize, 0, $termsHeaderXCoordinate, $termsHeaderYCoordinate, $black, $fontBold, $termsHeaderText);

            //Draw the terms text for the current page
            $termsStartXCoordinate = 0+$waiverMargin+$textPadding*2;
            $termsStartYCoordinate = $subheaderHeight+$headerHeight+$waiverMargin+$textPadding*5;
            $currentPageWaiverText = implode($currentPageWaiverText,"\n");
            imagettftext($waiverCanvas, $termsFontSize, 0, $termsStartXCoordinate, $termsStartYCoordinate, $black, $font, $currentPageWaiverText);

            //Draw the footer line
            $footerStartXCoordinate = 0+$waiverMargin;
            $footerStartYCoordinate = $termsHeight+$subheaderHeight+$headerHeight+$waiverMargin;
            imageline($waiverCanvas,$footerStartXCoordinate,$footerStartYCoordinate,$waiverWidth-$waiverMargin,$footerStartYCoordinate,$black);

            //Draw the footer text and lines
            $footerLabelsStartXCoordinate = $waiverMargin + $textPadding*2;
            $footerLabelsStartYCoordinate = $footerHeight/2 + $footerStartYCoordinate + $textPadding*2;
            imagettftext($waiverCanvas, $footerLabelsFontSize, 0, $footerLabelsStartXCoordinate, $footerLabelsStartYCoordinate, $black, $fontBold, $footerLabelParticipantText);
            $participantTextBox = imagettfbbox($footerLabelsFontSize, 0, $fontBold, $footerLabelParticipantText);
            $participantTextBoxWidth = $participantTextBox[2];

            //Paste the waiver signature, if present
            if ($signatureImage != null)
            {
                imagecopy($waiverCanvas,($this->base64_to_imageresource($signatureImage)),$footerLabelsStartXCoordinate+$participantTextBoxWidth - $textPadding
                    ,$footerLabelsStartYCoordinate + $textPadding*2-80,0,0,160,90);
            }

            //Draw the waiver signature line
            imageline($waiverCanvas,$footerLabelsStartXCoordinate+$participantTextBoxWidth - $textPadding,$footerLabelsStartYCoordinate + $textPadding*2,$waiverWidth/2,$footerLabelsStartYCoordinate + $textPadding*2,$black);

            //Draw the date line
            imageline($waiverCanvas,$waiverWidth/2 + $waiverMargin*2,$footerLabelsStartYCoordinate + $textPadding*2,$waiverWidth - $waiverMargin*2,$footerLabelsStartYCoordinate + $textPadding*2,$black);

            //Write the date label text
            imagettftext($waiverCanvas, $footerLabelsFontSize, 0, $waiverWidth/2 + $waiverMargin*2, $footerLabelsStartYCoordinate + $textPadding*4, $black, $fontBold, $footerLabelDateText);

            //Write the date value text
            imagettftext($waiverCanvas, $footerDataFontSize, 0, $waiverWidth/2 + $waiverMargin*2 + $textPadding*9, $footerLabelsStartYCoordinate + $textPadding, $black, $font, $dateForSignatureAreaText);

            //Generate the current page number text

            $pageText = $currentPage . " " . $ofText .  " " . sizeof($waiverText);

            //Determine how to center the page number text
            $pageTextBox = imagettfbbox($footerDataFontSize, 0, $font, $pageText);
            $pageTextBoxWidth = $pageTextBox[2];
            $pageXCoordinate = ceil(($waiverWidth - $pageTextBoxWidth) / 2);
            $pageYCoordinate = $footerLabelsStartYCoordinate + $textPadding*7;

            //Write the page number text
            imagettftext($waiverCanvas, $footerDataFontSize, 0, $pageXCoordinate, $pageYCoordinate, $black, $font, $pageText);

            $currentPage += 1;

            //Convert the image resource to a jpg
            ob_start();
            imagejpeg($waiverCanvas,null,90);
            $waiverImage = ob_get_contents();
            ob_end_clean();

            //Convert the jpeg to base64
            $waiverImageBase64 = 'data:image/' . 'jpeg' . ';base64,' . base64_encode($waiverImage);

            array_push($waivers,$waiverImageBase64);
        }

        return $waivers;

    }

    function base64_to_imageresource($base64_string) {
        $data = explode(',', $base64_string);

        return imagecreatefromstring(base64_decode($data[1]));
    }

    function wrap($fontSize, $angle, $fontFace, $string, $width){

        //Method 1: Hacky way of gaining performance
        if ($fontSize == 10) //Default, Arial font - not monospaced
        {
            return wordwrap($string,110);
        }
        else //Monospaced Droid Sans font
        {
            $dimensionsOfSingleCharacter = imagettfbbox($fontSize, $angle, $fontFace, 'A');
            $widthOfSingleCharacter = $dimensionsOfSingleCharacter[2] - $dimensionsOfSingleCharacter[0];

            $numOfCharacters = (int)( $width / $widthOfSingleCharacter);

            return wordwrap($string,$numOfCharacters);
        }

        //Method 2 - The real, slow (8+ seconds) way of properly wrapping any text/font in this context
        /*$words = explode(" ",$string);
        $wnum = count($words);
        $line = '';
        $string='';
        for($i=0; $i<$wnum; $i++){
            $line .= $words[$i];
            $dimensions = imagettfbbox($fontSize, $angle, $fontFace, $line);
            $lineWidth = $dimensions[2] - $dimensions[0];

            if ($lineWidth > $width) {
                $string.=($string != '' ? "\n".$words[$i].' ' : $words[$i].' ');
                $line = $words[$i].' ';
            }
            else {
                $string.=$words[$i].' ';
                $line.=' ';
            }
        }
        return $string;*/
    }

    /**
     * Find a racer by racer name
     * Requires private access
     *
     * @param string nickname
     * @return array
     */
    public function search() {
        if (!\ClubSpeed\Security\Authenticate::publicAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }
        if(empty($_GET['query'])) throw new RestException(412,'Please provide a search query via ?query=your_query_here');

        switch(@$_GET['field']) {

            case 'email':
                $tsql = "SELECT * FROM Customers WHERE EmailAddress = ? AND Deleted <> 'True'";
                $params = array(&$_GET['query']);
                break;

            default:
                $tsql = "SELECT * FROM Customers WHERE (RacerName LIKE ? OR EmailAddress LIKE ? OR FName LIKE ? OR LName LIKE ?) AND Deleted <> 'True'";
                $_GET['query'] = '%' . $_GET['query'] . '%';
                $params = array(&$_GET['query'], &$_GET['query'], &$_GET['query'], &$_GET['query']);
                break;
        }

        $rows = $this->run_query($tsql, $params);

        $output = array();

        foreach($rows as $row) {
            $output[] = array('id' => $row['CustID'],
                            'name' => array('nickname' => $row['RacerName'],
                            'first' => $row['FName'],
                            'last'  => $row['LName']),
                            'rpm'       => $row['RPM'],
                            'created_at' => date($GLOBALS['dateFormat'], strtotime($row['AccountCreated'])),
                            );

        }
        return array('racers' => $output);
    }

    public function email_is_claimed($request_data) {
        if (!\ClubSpeed\Security\Authenticate::privateAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }
        return array(
            "used" => $this->logic->customers->email_is_claimed(@$request_data['email'])
        );
    }

    /**
     * @url POST /:racer_id/waivers
     */
    public function waivers($racer_id, $request_data = array()) {
        try {
            if (!Authenticate::privateAccess())
                throw new RestException(401, "Invalid authorization!");
            $customer = $this->logic->customers->get($racer_id);
            $customer = $customer[0];
            $customerId = $customer->CustID; // could also use $racer_id directly at this point. get will throw on non-exist.
            $isMinor = isset($request_data['isMinor']) && $request_data['isMinor'] == "true"; // should be a lookup based on customer info

            if (isset($request_data['signaturephoto'])) {
                $signaturephoto = $request_data['signaturephoto'];
                if (!empty($signaturephoto)) {
                    if ($isMinor) {
                        $picturePath = empty($GLOBALS['customerMinorSignatureImagePath']) ? 'C:\ClubSpeed\CustomerSignatures2' : $GLOBALS['customerMinorSignatureImagePath'];
                        file_put_contents(
                            $picturePath . DIRECTORY_SEPARATOR . $customerId . '.jpg',
                            $this->base64_to_img($request_data['signaturephoto'])
                        );
                    }
                    else {
                        $picturePath = empty($GLOBALS['customerAdultSignatureImagePath']) ? 'C:\ClubSpeed\CustomerSignatures' : $GLOBALS['customerAdultSignatureImagePath'];
                        file_put_contents(
                            $picturePath . DIRECTORY_SEPARATOR . $customerId . '.jpg',
                            $this->base64_to_img($request_data['signaturephoto'])
                        );
                    }
                }
            }

            if ($isMinor) {
                $waiverPath = empty($GLOBALS['customerMinorWaiverImagePath']) ? 'C:\ClubSpeed\CustomerWaivers2' : $GLOBALS['customerMinorWaiverImagePath'];
                $termsText = $request_data['Waiver2'];
            }
            else {
                $waiverPath = empty($GLOBALS['customerAdultWaiverImagePath']) ? 'C:\ClubSpeed\CustomerWaivers' : $GLOBALS['customerAdultWaiverImagePath'];
                $termsText = @$request_data['Waiver1'];
            }

            $subheaderData = array(
                "Dated"         => date("l, F j, Y m/d/y")
                , "Business"    => isset($request_data['BusinessName']) ? $request_data['BusinessName'] : ''
                , "Participant" => $customer->FName . ' ' . $customer->LName
                , "License #"   => ""
                , "Birthdate"   => str_replace("T00:00:00.00","",$customer->BirthDate)
                , "Phone"       => $customer->Cell // was 'mobile' earlier
                , "Email"       => $customer->EmailAddress
                , "CustID"      => $customerId
            );

            $waivers = $this->createWaiverImages(
                $termsText
                , $subheaderData
                , @$request_data['signaturephoto']
            );

            $currentPage = 1;
            foreach($waivers as $currentWaiverPage)
            {
                file_put_contents($waiverPath . DIRECTORY_SEPARATOR . $customerId . '-' . $currentPage .  '.jpg',
                    $this->base64_to_img($currentWaiverPage));
                $currentPage++;
            }
        }
        catch(Exception $e) {
            $this->_error($e);
        }
    }

    /**
     * @url POST /:racer_id/profile_photo
     */
    public function profile_photo($racer_id, $request_data = array()) {
        try {
            if (!Authenticate::customerAccess($racer_id))
                throw new RestException(401, "Invalid authorization!");
            if (!$this->logic->customers->exists($racer_id))
                throw new \RecordNotFoundException("Unable to find record on Customers with key: ($racer_id)");
            if (isset($request_data['profilephoto'])) {
                $photo = $request_data['profilephoto'];
                if (!empty($photo)) {
                    $picture_folder = empty($GLOBALS['customerPictureImagePath']) ? 'C:\ClubSpeed\CustomerPictures' : $GLOBALS['customerPictureImagePath'];
                    $picture_file = $racer_id . '.jpg';
                    $picture_path = $picture_folder . DIRECTORY_SEPARATOR . $picture_file;
                    $picture_data = $this->base64_to_img($photo);
                    file_put_contents($picture_path, $picture_data);
                }
            }
        }
        catch(Exception $e) {
            $this->_error($e);
        }
    }

    public function index($racer_id, $sub = null, $sub2 = null, $request_data = null) {
        if($racer_id == 'valid') return $this->valid($_REQUEST['email'], $_REQUEST['racerName']);
        if($racer_id == 'create') return $this->postCreate($_REQUEST);
        if($racer_id == 'login') return $this->login($_REQUEST);
        if($racer_id == 'fb_login') return $this->postfb_login($_REQUEST);
        if($racer_id == 'toprpm') return $this->top_rpm();
        if($racer_id == 'last_updated') return $this->last_updated(@$_REQUEST['start'], @$_REQUEST['end'], @$_REQUEST['limit'], @$_REQUEST['startCustId'], @$_REQUEST['endCustId']);
        if($racer_id == 'by_id') return $this->by_id($_REQUEST['start'], @$_REQUEST['limit']);
        if($racer_id == 'update_unsubscribed') return $this->update_unsubscribed($_REQUEST['email']);
        if($racer_id == 'most_improved_rpm') return $this->most_improved_rpm($_REQUEST);
        if($racer_id == 'email_is_claimed') return $this->email_is_claimed($_REQUEST);
        if(!is_numeric($racer_id)) throw new RestException(412,'Not a valid racer id');

        if($sub != null) {
            switch($sub) {
                case 'races':
                    return $this->races($racer_id);
            }
        }
        else {
            return $this->racer($racer_id);
        }
    }

    /**
     * Most Improved RPM
     * Requires public access
     *
     * @param array $request_data
     * @return array
     */
    public function most_improved_rpm($params) {
        if (!\ClubSpeed\Security\Authenticate::publicAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }
        $limit = empty($params['limit']) ? 50 : (int)$params['limit'];
        switch(@$params['range']) {
            case 'month':
                $month = empty($params['month']) ? date('n') : (int)$params['month'];
                $year  = empty($params['year']) ? date('Y') : (int)$params['year'];
                $tsql_params = $month . ', ' . $year . ', ' . $limit;
                break;
            case 'year':
                $year = empty($params['year']) ? date('Y') : (int)$params['year'];
                $tsql_params = '0, ' . $year . ', ' . $limit;
                break;
            default:
                throw new RestException(412,'Not a valid range (Must be "month" or "year")');
        }
        
        // TODO Add filtering by Speed Level
        
        $tsql = "GetMostImproveRPM " . $tsql_params;
        $rows = $this->run_query($tsql, array());
        
        foreach($rows as $key => $value) {
            $rows[$key] = array('rpmChange' => $value['RPMDiff'], 'nickname' => $value['RacerName'], 'rpm' => $value['RPM']);
        }
        
        return $rows;
    }

    /**
     * Get a racer's information
     * Requires public access
     *
     * @param integer $customerId
     * @return array
     */
    public function racer($customerId) {
        if (!\ClubSpeed\Security\Authenticate::publicAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }
        if(!is_numeric($customerId)) throw new RestException(412,'Not a valid number');

        $tsql = "SELECT TOP (1) * FROM Customers WHERE CustID = ?";

        $params = array(&$customerId);

        $rows = $this->run_query($tsql, $params);

        $output = array();

        foreach($rows as $row) {
            $output = array('id' => $row['CustID'],
                            'name' => array('nickname' => $row['RacerName'],
                            'first' => $row['FName'],
                            'last'  => $row['LName']),
                            'rpm'       => $row['RPM'],
                            'created_at' => date($GLOBALS['dateFormat'], strtotime($row['AccountCreated'])),
                            'visits' => $row['TotalVisits'],
                            'races'  => $row['TotalRaces'],
                            //'row' => $row
                            );

        }

        return array('racer' => $output);
    }

    /**
     * See if a user is valid -- for Elite Karting UK
     * Requires public access
     *
     * @param string $email
     * @param string $racerName
     * @return array
     */
    public function valid($email, $racerName) {
        if (!\ClubSpeed\Security\Authenticate::publicAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }

        $tsql = "SELECT c.CustID, c.FName, c.LName, c.RacerName, c.EmailAddress FROM Customers c LEFT JOIN Memberships m ON c.CustID = m.CustID WHERE c.EmailAddress = ? AND c.RacerName = ? AND c.Deleted = 0"; //  AND m.ExpirationDate > GETDATE() AND m.MembershipTypeID IN (2,3,4)

        $params = array(&$email, &$racerName);

        $rows = $this->run_query($tsql, $params);
        $output = array(count($rows) > 0);

        return array('valid' => $output);
    }

    /**
     * Get the list of races a racer has participated in
     * Requires public access
     * 
     * @param integer $customerId
     * @return array
     */
    public function races($customerId) {
        if (!\ClubSpeed\Security\Authenticate::publicAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }

        if(!is_numeric($customerId)) throw new RestException(412,'Racer ID is not a valid number');

        $tsql = <<<EOD
        IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HeatMain' AND COLUMN_NAME = 'NumberOfCadetReservation')
        BEGIN
            EXEC( 'SELECT     hm.HeatNo, hm.TrackNo, ht.HeatTypeName, t.Description AS TrackName, hm.ScheduledTime, hm.HeatTypeNo, hm.LapsOrMinutes, hm.HeatStatus, hm.EventRound, hm.Begining, hm.Finish, hm.WinBy, hm.RaceBy,
                          hm.ScheduleDuration, hm.PointsNeeded, hm.SpeedLevel, hm.HeatColor, hm.NumberOfReservation, hm.MemberOnly, hm.HeatNotes, hm.ScoreID, hm.RacersPerHeat,
                          hm.NumberOfCadetReservation, hm.CadetsPerHeat, hd.HeatNo AS Expr1, hd.CustID, hd.AutoNo, hd.LineUpPosition, hd.GroupID, hd.RPM, hd.PointHistoryID,
                          hd.FirstTime, hd.UserID, hd.FinishPosition, hd.GroupFinishPosition, hd.RPMDiff, hd.PositionEditedDate, hd.HistoryAutoNo, hd.Scores, hd.TimeAdded,
                          hd.AssignedtoEntitleHeat
                        FROM HeatMain AS hm LEFT OUTER JOIN
                                              HeatDetails AS hd ON hm.HeatNo = hd.HeatNo LEFT JOIN Tracks t ON hm.TrackNo = t.TrackNo
                        LEFT JOIN HeatTypes ht ON hm.HeatTypeNo = ht.HeatTypeNo
                        WHERE (hd.CustID = $customerId)' )
        END
        ELSE
        BEGIN
            EXEC( 'SELECT     hm.HeatNo, hm.TrackNo, ht.HeatTypeName, t.Description AS TrackName, hm.ScheduledTime, hm.HeatTypeNo, hm.LapsOrMinutes, hm.HeatStatus, hm.EventRound, hm.Begining, hm.Finish, hm.WinBy, hm.RaceBy,
                          hm.ScheduleDuration, hm.PointsNeeded, hm.SpeedLevel, hm.HeatColor, hm.NumberOfReservation, hm.MemberOnly, hm.HeatNotes, hm.ScoreID, hm.RacersPerHeat,
                          hd.HeatNo AS Expr1, hd.CustID, hd.AutoNo, hd.LineUpPosition, hd.GroupID, hd.RPM, hd.PointHistoryID,
                          hd.FirstTime, hd.UserID, hd.FinishPosition, hd.GroupFinishPosition, hd.RPMDiff, hd.PositionEditedDate, hd.HistoryAutoNo, hd.Scores, hd.TimeAdded
                        FROM HeatMain AS hm LEFT OUTER JOIN
                                              HeatDetails AS hd ON hm.HeatNo = hd.HeatNo LEFT JOIN Tracks t ON hm.TrackNo = t.TrackNo
                        LEFT JOIN HeatTypes ht ON hm.HeatTypeNo = ht.HeatTypeNo
                        WHERE (hd.CustID = $customerId)' )
        END
EOD;

        $rows = $this->run_query($tsql);

        $output = array();

        foreach( $rows as $row)
        {
              $output[] = array('id' => $row['HeatNo'],
                            'track_id' => $row['TrackNo'],
                            'heat_type_id' => $row['HeatTypeNo'],
                            'heat_name' => $row['HeatTypeName'],
                            'track_name' => $row['TrackName'],
                            'speed_level_id' => $row['SpeedLevel'],
                            'starts_at' => date($GLOBALS['dateFormat'] . ' H:i:s', strtotime($row['ScheduledTime'])),
                            'racer_id' => $row['CustID'],
                            'finish_position' => $row['FinishPosition'],
                            'rpm' => $row['RPM'],
                            //'row' => $row
                            );
        }

        return array('heats' => $output);
    }

    public function update_unsubscribed($email) {
        if (!\ClubSpeed\Security\Authenticate::privateAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }

        $output = array('No updates for ' . $email);

        // Look for customer, if exists and donotmail = 0
        $tsql_params = array($email);
        $tsql = "SELECT custid, emailaddress, donotmail FROM customers WHERE emailaddress = ?";
        $rows = $this->run_query($tsql, $tsql_params);

        //echo 'Found ' . count($rows);

        if(count($rows) > 0) {
            foreach($rows as $customer) {
                if($customer['donotmail'] == 0) {
                    // Update customer row and insert trigger log

                    // Set donotmail = 0
                    $tsql_params = array($customer['custid']);
                    $tsql = "UPDATE Customers SET donotmail = '1' WHERE CustId = ?";
                    //echo $tsql;
                    //print_r($tsql_params);
                    $rows = $this->run_query($tsql, $tsql_params);
                    print_r($rows);

                    // Insert into triggerlog so that it replicates
                    $tsql_params = array($customer['custid']);
                    $tsql = "INSERT INTO triggerlogs (custid, lastupdated, tablename, type, deleted) VALUES (?, GETDATE(), 'Customers', 'Insert/Update', 0)";
                    //echo $tsql;
                    //print_r($tsql_params);
                    $rows = $this->run_query($tsql, $tsql_params);

                    $output = array('Updated ' . $email);
                }
            }
        }
        return $output;
    }

    public function last_updated($start, $end, $limit = 1000, $startCustId = 0, $endCustId = 2000000000) {
        if (!\ClubSpeed\Security\Authenticate::privateAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }

        $limit = empty($limit) || !is_numeric($limit) ? 1000 : $limit;
				$startCustId = empty($startCustId) || !is_numeric($startCustId) ? 0 : $startCustId;
        $endCustId = empty($endCustId) || !is_numeric($endCustId) ? 2000000000  : $endCustId;

        $tsql_params = array($start, $end, $startCustId, $endCustId);

        $tsql = "select top($limit) custid, birthdate, phonenumber, (custid/1000000) AS locationid, membershipstatus, membershiptextlong AS membershiptext, cell, fname, lname, racername, birthdate, gender, emailaddress, address, address2, city, state, zip, country, rpm, accountcreated, lastvisited, totalvisits, totalraces, donotmail, custom1, custom2, custom3, custom4 from customers c where deleted = 0 and isemployee = 0 and isgiftcard = 0 AND lastVisited between ? and ? AND custid between ? and ? ORDER BY lastVisited";

        $racers = $this->run_query($tsql, $tsql_params);

        if(!isset($_GET['suppress_additional_fields'])) { // Hook to prevent these "heavy" queries from being executed
            foreach($racers as $id => $racer) {
                
                // Add memberships
                $racers[$id]['memberships'] = array();
                $memberships = $this->run_query("GetCustomerMemberships {$racer['custid']}", array());
                foreach($memberships as $membership) {
                    $racers[$id]['memberships'][] = array('name' => $membership['Description'], 'expiration' => $membership['ExpirationDate']);
                }
                
                // Add points
                $points = $this->run_query("GetCustomerStandardPoints {$racer['custid']}", array());
                $racers[$id]['points'] = floatval($points[0]['Points']);
                
                // Add cell phone consent and date
                $racers[$id]['cell_consent_given'] = empty($racer['cell']) ? false : true;
                $racers[$id]['cell_consent_date']  = empty($racers[$id]['cell_consent_given']) ? null : $racer['accountcreated'];
                
                // Add email consent and date
                $racers[$id]['email_consent_given'] = ($racer['donotmail'] == 1) ? false : true;
                $racers[$id]['email_consent_date']  = empty($racers[$id]['email_consent_given']) ? null : $racer['accountcreated'];
                
            }
        }

        return array('racers' => $racers);
    }

    /**
     * Find racers by ID
     * Requires private access
     *
     * @param integer $customerId
     * @return array
     */
    public function by_id($startId, $limit = null) {
        if (!\ClubSpeed\Security\Authenticate::privateAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }
        $limit = empty($limit) || !is_numeric($limit) ? 1000 : $limit;

        $tsql_params = array($startId);

        $tsql = "select top($limit) custid, birthdate, cell, fname, lname, racername, birthdate, gender, emailaddress, zip,rpm, accountcreated, lastvisited, totalvisits, totalraces, donotmail  from customers where emailaddress <> '' and deleted = 0 and isemployee = 0 and isgiftcard = 0 AND custid > ? ORDER BY custid";

        $rows = $this->run_query($tsql, $tsql_params);

        return array('racers' => $rows);
    }

    public function top_rpm() {
        if (!\ClubSpeed\Security\Authenticate::publicAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }
        //if(empty($_GET['query'])) throw new RestException(412,'Please provide a search query via ?query=your_query_here');

        $tsql_params = array();
        $tsql_gender = '';


        // Limit query
        if(isset($_GET['limit']) && is_numeric($_GET['limit'])) {
            if($_GET['limit'] > 100) throw new RestException(412,'Cannot return more than 100 rows');
            //$tsql_params[] = (int)$_GET['limit'];
            $limit = (int)$_GET['limit'];
        } else {
            //$tsql_params[] = 50;
            $limit = 50;
        }

        // Sort by gender
        if(isset($_GET['gender'])) {
            $genders = array('m' => 1, 'f' => 2);
            if(!in_array(strtolower($_GET['gender']), array('m', 'f'))) throw new RestException(412,'Invalid gender given');
            $tsql_gender = 'AND Gender = ?';
            $tsql_params[] = &$genders[strtolower($_GET['gender'])];
        }

        // TODO Add filtering by speedlevel

        $tsql = "SELECT TOP(".$limit.") * FROM Customers WHERE RPM <> 10000 $tsql_gender AND Deleted <> 'True' AND IsEmployee = 0 ORDER BY RPM DESC";

        $rows = $this->run_query($tsql, $tsql_params);

        $output = array();

        foreach($rows as $row) {
            $output[] = array('id' => $row['CustID'],
                            'name' => array('nickname' => $row['RacerName'],
                            'first' => $row['FName'],
                            'last'  => $row['LName']),
                            'rpm'       => $row['RPM'],
                            'created_at' => date($GLOBALS['dateFormat'], strtotime($row['AccountCreated'])),
                            );

        }
        return array('racers' => $output);
    }

    private function run_query($tsql, $params = array()) {

        // Connect
        try {
            $conn = new PDO( "sqlsrv:server=(local) ; Database=ClubSpeedV8", "", "");
            $conn->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION );

            // Prepare statement
            $stmt = $conn->prepare($tsql);

            // Execute statement
            $stmt->execute($params);

            // Put in array
            $output = $stmt->fetchAll(PDO::FETCH_ASSOC);

        } catch(Exception $e) {
            die( print_r( $e->getMessage()) );
        }

        return $output;
    }
    
    private function run_exec($tsql, $params = array()) {

        // Connect
        try {
            $conn = new PDO( "sqlsrv:server=(local) ; Database=ClubSpeedV8", "", "");
            $conn->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION );

            // Prepare statement
            $stmt = $conn->prepare($tsql);

            // Execute statement
            $stmt->execute($params);

        } catch(Exception $e) {
            die( print_r( $e->getMessage()) );
        }

        return true;
    }

    protected final function _error($e) {
        if ($e instanceof RestException)
            throw $e;
        if ($e instanceof CSException)
            throw new RestException($e->getCode() ?: 412, $e->getMessage());
        throw new RestException(500, $e->getMessage());
    }
}