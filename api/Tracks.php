<?php
/**
 * ClubSpeed API
 * 
 * Proposed API for accessing racer, heat and scoring information
 * generated by NOLA Motorsports Park ClubSpeed server.
 * @author Wes Ratcliff <wes@nolamotor.com>
 * @version 0.1
 */
 
 /**
  * /tracks/
  */
class Tracks
{
    public $restler;
    
    function __construct(){
        // header('Access-Control-Allow-Origin: *'); //Here for all /say
    }
    
    /**
     * Return all tracks
     */
    
    public function index($product_id, $sub = null) {
        return $this->tracks();
    }

    /**
     * Get a listing of tracks
     * Requires public access
     * @param integer $customerId
     * @return array 
     */
    public function tracks() {
        if (!\ClubSpeed\Security\Authenticate::publicAccess()) {
            throw new RestException(401, "Invalid authorization!");
        }

        /*
         * HACK: Determine if track has the new "Enabled" column in the Tracks table. In an ideal world,
         * we would update the schema of all of the tracks.
         *
         */
        $tsql = "SELECT (CASE WHEN COL_LENGTH('Tracks','Enabled') IS NULL
                              THEN 0
                              ELSE 1
                         END) AS EnabledExists
                ";
        $result = $this->run_query($tsql, array());
        $enabledColumnExists = $result[0]["EnabledExists"] === "1" ? true : false;

        if ($enabledColumnExists) //If the new Enabled column exists, filter out disabled tracks
        {
            $tsql = "SELECT TrackNo AS id, Description AS name FROM Tracks WHERE Enabled = 1";
        }
        else
        {
            $tsql = "SELECT TrackNo AS id, Description AS name FROM Tracks";
        }

        $rows = $this->run_query($tsql, array());
        return array('tracks' => $rows);    
    }
    
    private function run_query($tsql, $params = array()) {
        
        // Connect
        try {
            $conn = new PDO( "sqlsrv:server=(local) ; Database=ClubSpeedV8", "", "");
            $conn->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION );
            
            // Prepare statement
            $stmt = $conn->prepare($tsql);
    
            // Execute statement
            $stmt->execute($params);
            
            // Put in array
            $output = $stmt->fetchAll(PDO::FETCH_ASSOC);

        } catch(Exception $e) { 
            die( print_r( $e->getMessage() ) ); 
        }
        
        return $output;
    }
}